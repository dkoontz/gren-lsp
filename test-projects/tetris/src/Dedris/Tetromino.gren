module Dedris.Tetromino exposing
    ( Tetromino
    , Type (..)
    , i
    , j
    , l
    , o
    , s
    , t
    , z
    , new
    , rotate
    , random
    )

import Random


-- Tetromino mit Formbezeichnung und Blockmatrix
type alias Tetromino =
    { type_ : Type
    , blocks : Array { row : Int , col : Int }
    }


-- Formbezeichnungen für Tetrominos
type Type
    = I | J | L | O | S | T | Z


-- Tetromino in I-Form
i : Tetromino
i =
    { type_ = I
    , blocks =
        [ { row = 2 , col = 0 }
        , { row = 2 , col = 1 }
        , { row = 2 , col = 2 }
        , { row = 2 , col = 3 }
        ]
    }


-- Tetromino in J-Form
j : Tetromino
j =
    { type_ = J
    , blocks =
        [ { row = 1 , col = 0 }
        , { row = 1 , col = 1 }
        , { row = 1 , col = 2 }
        , { row = 2 , col = 2 }
        ]
    }


-- Tetromino in L-Form
l : Tetromino
l =
    { type_ = L
    , blocks =
        [ { row = 1 , col = 0 }
        , { row = 1 , col = 1 }
        , { row = 1 , col = 2 }
        , { row = 2 , col = 0 }
        ]
    }


-- Tetromino in O-Form
o : Tetromino
o =
    { type_ = O
    , blocks =
        [ { row = 0 , col = 0 }
        , { row = 0 , col = 1 }
        , { row = 1 , col = 0 }
        , { row = 1 , col = 1 }
        ]
    }


-- Tetromino in S-Form
s : Tetromino
s =
    { type_ = S
    , blocks =
        [ { row = 0 , col = 1 }
        , { row = 0 , col = 2 }
        , { row = 1 , col = 0 }
        , { row = 1 , col = 1 }
        ]
    }


-- Tetromino in T-Form
t : Tetromino
t =
    { type_ = T
    , blocks =
        [ { row = 1 , col = 0 }
        , { row = 1 , col = 1 }
        , { row = 1 , col = 2 }
        , { row = 2 , col = 1 }
        ]
    }


-- Tetromino in Z-Form
z : Tetromino
z =
    { type_ = Z
    , blocks =
        [ { row = 1 , col = 0 }
        , { row = 1 , col = 1 }
        , { row = 2 , col = 1 }
        , { row = 2 , col = 2 }
        ]
    }


-- Erzeuge einen Tetromino
new : Type -> Tetromino
new type_ =
    case type_ of
        I -> i
        J -> j
        L -> l
        O -> o
        S -> s
        T -> t
        Z -> z


-- Rotiere einen Tetromino im Uhrzeigersinn
rotate : Tetromino -> Tetromino
rotate tmino =
    case tmino.type_ of
        I ->
            if
                Array.member { row = 0 , col = 1 } tmino.blocks
            then
                { tmino
                    | blocks =
                        [ { row = 2 , col = 0 }
                        , { row = 2 , col = 1 }
                        , { row = 2 , col = 2 }
                        , { row = 2 , col = 3 }
                        ]
                }
            else if
                Array.member { row = 2 , col = 0 } tmino.blocks
            then
                { tmino
                    | blocks =
                        [ { row = 0 , col = 1 }
                        , { row = 1 , col = 1 }
                        , { row = 2 , col = 1 }
                        , { row = 3 , col = 1 }
                        ]
                }
            else
                tmino
        J ->
            if
                Array.member { row = 0 , col = 0 } tmino.blocks
            then
                { tmino
                    | blocks =
                        [ { row = 0 , col = 1 }
                        , { row = 0 , col = 2 }
                        , { row = 1 , col = 1 }
                        , { row = 2 , col = 1 }
                        ]
                }
            else if
                Array.member { row = 0 , col = 2 } tmino.blocks
            then
                { tmino
                    | blocks =
                        [ { row = 1 , col = 0 }
                        , { row = 1 , col = 1 }
                        , { row = 1 , col = 2 }
                        , { row = 2 , col = 2 }
                        ]
                }
            else if
                Array.member { row = 2 , col = 2 } tmino.blocks
            then
                { tmino
                    | blocks =
                        [ { row = 0 , col = 1 }
                        , { row = 1 , col = 1 }
                        , { row = 2 , col = 0 }
                        , { row = 2 , col = 1 }
                        ]
                }
            else
                { tmino
                    | blocks =
                        [ { row = 0 , col = 0 }
                        , { row = 1 , col = 0 }
                        , { row = 1 , col = 1 }
                        , { row = 1 , col = 2 }
                        ]
                }
        L ->
            if
                Array.member { row = 0 , col = 2 } tmino.blocks
            then
                { tmino
                    | blocks =
                        [ { row = 0 , col = 1 }
                        , { row = 1 , col = 1 }
                        , { row = 2 , col = 1 }
                        , { row = 2 , col = 2 }
                        ]
                }
            else if
                Array.member { row = 2 , col = 2 } tmino.blocks
            then
                { tmino
                    | blocks =
                        [ { row = 1 , col = 0 }
                        , { row = 1 , col = 1 }
                        , { row = 1 , col = 2 }
                        , { row = 2 , col = 0 }
                        ]
                }
            else if
                Array.member { row = 2 , col = 0 } tmino.blocks
            then
                { tmino
                    | blocks =
                        [ { row = 0 , col = 0 }
                        , { row = 0 , col = 1 }
                        , { row = 1 , col = 1 }
                        , { row = 2 , col = 1 }
                        ]
                }
            else
                { tmino
                    | blocks =
                        [ { row = 0 , col = 2 }
                        , { row = 1 , col = 0 }
                        , { row = 1 , col = 1 }
                        , { row = 1 , col = 2 }
                        ]
                }
        O ->
            tmino
        S ->
            if
                Array.member { row = 0 , col = 2 } tmino.blocks
            then
                { tmino
                    | blocks =
                        [ { row = 0 , col = 0 }
                        , { row = 1 , col = 0 }
                        , { row = 1 , col = 1 }
                        , { row = 2 , col = 1 }
                        ]
                }
            else
                { tmino
                    | blocks =
                        [ { row = 0 , col = 1 }
                        , { row = 0 , col = 2 }
                        , { row = 1 , col = 0 }
                        , { row = 1 , col = 1 }
                        ]
                }
        T ->
            if not
                ( Array.member { row = 0 , col = 1 } tmino.blocks )
            then
                { tmino
                    | blocks =
                        [ { row = 0 , col = 1 }
                        , { row = 1 , col = 0 }
                        , { row = 1 , col = 1 }
                        , { row = 2 , col = 1 }
                        ]
                }
            else if not
                ( Array.member { row = 1 , col = 2 } tmino.blocks )
            then
                { tmino
                    | blocks =
                        [ { row = 0 , col = 1 }
                        , { row = 1 , col = 0 }
                        , { row = 1 , col = 1 }
                        , { row = 1 , col = 2 }
                        ]
                }
            else if not
                ( Array.member { row = 2 , col = 1 } tmino.blocks )
            then
                { tmino
                    | blocks =
                        [ { row = 0 , col = 1 }
                        , { row = 1 , col = 1 }
                        , { row = 1 , col = 2 }
                        , { row = 2 , col = 1 }
                        ]
                }
            else
                { tmino
                    | blocks =
                        [ { row = 1 , col = 0 }
                        , { row = 1 , col = 1 }
                        , { row = 1 , col = 2 }
                        , { row = 2 , col = 1 }
                        ]
                }
        Z ->
            if
                Array.member { row = 2 , col = 2 } tmino.blocks
            then
                { tmino
                    | blocks =
                        [ { row = 0 , col = 1 }
                        , { row = 1 , col = 0 }
                        , { row = 1 , col = 1 }
                        , { row = 2 , col = 0 }
                        ]
                }
            else
                { tmino
                    | blocks =
                        [ { row = 1 , col = 0 }
                        , { row = 1 , col = 1 }
                        , { row = 2 , col = 1 }
                        , { row = 2 , col = 2 }
                        ]
                }


-- Erzeuge einen zufällig gewählten Tetromino
random : Random.Generator Type
random =
    Random.int 0 6
        |> Random.map
            ( \ n ->
                case n of
                    0 -> I
                    1 -> J
                    2 -> L
                    3 -> O
                    4 -> S
                    5 -> T
                    _ -> Z
            )
